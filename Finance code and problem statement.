##SQL Advanced: Finance Analytics

### Module: User-Defined SQL Functions

-- 1. first grab customer codes for Croma india
	SELECT * FROM dim_customer WHERE customer like "%croma%" AND market="india";

-- 2. Get all the sales transaction data from fact_sales_monthly table for that customer(croma: 90002002) in the fiscal_year 2021
	SELECT * FROM fact_sales_monthly 
	WHERE 
            customer_code=90002002 AND
            YEAR(DATE_ADD(date, INTERVAL 4 MONTH))=2021 
	ORDER BY date asc
	LIMIT 100000;

-- 3. create a function 'get_fiscal_year' to get fiscal year by passing the date
	CREATE FUNCTION get_fiscal_year(calendar_date DATE) 
	RETURNS int
    	DETERMINISTIC
	BEGIN
        	DECLARE fiscal_year INT;
        	SET fiscal_year = YEAR(DATE_ADD(calendar_date, INTERVAL 4 MONTH));
        	RETURN fiscal_year;
	END

-- 4. create a fucntion for `get_fiscal_quarter to get the quarter of fiscal years
	CREATE FUNCTION `get_fiscal_quarter` (
	calender_date date
	)
	RETURNS char(2)
	DETERMINISTIC
	BEGIN
		declare m tinyint;
	    	declare qtr char(2);
		set m = month (calender_date);
	    
	    CASE 
			WHEN m IN (9, 10, 11) THEN
	        SET qtr = 'Q1';
	        WHEN m IN (12, 1, 2) THEN
	        SET qtr = 'Q2';
	        WHEN m IN (3, 4, 5) THEN
	        SET qtr = 'Q3';
	        ELSE 
	        SET qtr = 'Q4';
	    END CASE;  
		RETURN qtr;
	   END;


-- 5. Replacing the function created in the step:b
	SELECT * FROM fact_sales_monthly 
	WHERE 
            customer_code=90002002 AND
            get_fiscal_year(date)=2021 
	ORDER BY date asc
	LIMIT 100000;



### Module: Gross Sales Report: Monthly Product Transactions

-- 1. Perform joins to pull product information
	SELECT s.date, s.product_code, p.product, p.variant, s.sold_quantity 
	FROM fact_sales_monthly s
	JOIN dim_product p
        ON s.product_code=p.product_code
	WHERE 
            customer_code=90002002 AND 
    	    get_fiscal_year(date)=2021     
	LIMIT 1000000;

-- 2. Performing join with 'fact_gross_price' table with the above query and generating required fields
	SELECT 
    	    s.date, 
            s.product_code, 
            p.product, 
            p.variant, 
            s.sold_quantity, 
            g.gross_price,
            ROUND(s.sold_quantity*g.gross_price,2) as gross_price_total
	FROM fact_sales_monthly s
	JOIN dim_product p
            ON s.product_code=p.product_code
	JOIN fact_gross_price g
            ON g.fiscal_year=get_fiscal_year(s.date)
    	AND g.product_code=s.product_code
	WHERE 
    	    customer_code=90002002 AND 
            get_fiscal_year(s.date)=2021     
	LIMIT 1000000;

-- 3. 3. Generate a yearly report for Croma India where there are two columns
3.1. Fiscal Year
3.2. Total Gross Sales amount In that year from Croma

	SELECT 
	    get_fiscal_year(s.date) AS fiscal_year,
	    c.market,
	    SUM(g.gross_price * s.sold_quantity) AS total_sold_quantity
	FROM 
	    fact_sales_monthly s
	JOIN 
	    fact_gross_price g ON g.product_code = s.product_code 
	    AND g.fiscal_year = get_fiscal_year(s.date)
	JOIN 
	    dim_customer c ON c.customer_code = s.customer_code 
	WHERE 
	    c.market = 'India' and
	    c.customer = 'Croma'
	GROUP BY 
	    fiscal_year
	ORDER BY 
	    fiscal_year ASC;

				--or--

	select
	            get_fiscal_year(date) as fiscal_year,
	            
	            sum(round(sold_quantity*g.gross_price,2)) as yearly_sales
		from fact_sales_monthly s
		join fact_gross_price g
		on 
		    g.fiscal_year=get_fiscal_year(s.date) and
		    g.product_code=s.product_code
		where
		    customer_code=90002002
		group by get_fiscal_year(date)
		order by fiscal_year;
		






### Module: Gross Sales Report: Total Sales Amount

-- Generate monthly gross sales report for Croma India for all the years
	SELECT 
            s.date, 
    	    SUM(ROUND(s.sold_quantity*g.gross_price,2)) as monthly_sales
	FROM fact_sales_monthly s
	JOIN fact_gross_price g
        ON g.fiscal_year=get_fiscal_year(s.date) AND g.product_code=s.product_code
	WHERE 
             customer_code=90002002
	GROUP BY date;



### Module: Stored Procedures: Monthly Gross Sales Report

-- Generate monthly gross sales report for any customer using stored procedure
	CREATE PROCEDURE get_monthly_gross_sales_for_customer(
        	in_customer_codes TEXT
	)
	BEGIN
        	SELECT 
                    s.date, 
                    SUM(ROUND(s.sold_quantity*g.gross_price,2)) as monthly_sales
        	FROM fact_sales_monthly s
        	JOIN fact_gross_price g
               	    ON g.fiscal_year=get_fiscal_year(s.date)
                    AND g.product_code=s.product_code
        	WHERE 
                    FIND_IN_SET(s.customer_code, in_customer_codes) > 0
        	GROUP BY s.date
        	ORDER BY s.date DESC;
	END




### Module: Stored Procedure: Market Badge

--  Write a stored proc that can retrieve market badge. i.e. if total sold quantity > 5 million that market is considered "Gold" else "Silver"
	CREATE PROCEDURE get_market_badge(
        	IN in_market VARCHAR(45),
        	IN in_fiscal_year YEAR,
        	OUT out_level VARCHAR(45)
	)
	BEGIN
             DECLARE qty INT DEFAULT 0;
    
    	     # Default market is India
    	     IF in_market = "" THEN
                  SET in_market="India";
             END IF;
    
    	     # Retrieve total sold quantity for a given market in a given year
             SELECT 
                  SUM(s.sold_quantity) INTO qty
             FROM fact_sales_monthly s
             JOIN dim_customer c
             ON s.customer_code=c.customer_code
             WHERE 
                  get_fiscal_year(s.date)=in_fiscal_year AND
                  c.market=in_market;
        
             # Determine Gold vs Silver status
             IF qty > 5000000 THEN
                  SET out_level = 'Gold';
             ELSE
                  SET out_level = 'Silver';
             END IF;
	END
